// <auto-generated>
//     Generated by the ZirconNet.WPF source generator.
// </auto-generated>

#nullable enable
using global::{{ AppNamespace }};
using global::Microsoft.Extensions.DependencyInjection;
using global::ZirconNet.WPF.Debugging;
using global::ZirconNet.WPF.Extensions;

namespace ZirconNet.WPF.SourceGenerator.Hosting.Lifetime;

/// <summary>
/// Provides extension methods for configuring and running a WPF application lifetime.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode("ZirconNet.WPF.SourceGenerator", "{{ GeneratorVersion }}")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute]
[global::System.Diagnostics.DebuggerStepThroughAttribute]
public static class WpfApplicationLifeTimeExtensions
{
#if NET6_0_OR_GREATER
#if NET5_0_OR_GREATER
    [global::System.Runtime.Versioning.SupportedOSPlatform("windows")]
#endif
    /// <summary>
    /// Configures the WPF application lifetime for the host.
    /// </summary>
    /// <param name="builder">The host application builder.</param>
    /// <returns>
    /// The configured <see cref="global::Microsoft.Extensions.Hosting.IHostApplicationBuilder"/>.
    /// </returns>
    public static global::Microsoft.Extensions.Hosting.IHostApplicationBuilder UseWpfApplicationLifetime(this global::Microsoft.Extensions.Hosting.IHostApplicationBuilder builder)
    {
        builder.Services.AddSingleton<global::Microsoft.Extensions.Hosting.IHostLifetime, global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetime>();
        return builder;
    }

#if NET5_0_OR_GREATER
    [global::System.Runtime.Versioning.SupportedOSPlatform("windows")]
#endif
    /// <summary>
    /// Configures the WPF application lifetime for the host with custom options.
    /// </summary>
    /// <param name="builder">The host application builder.</param>
    /// <param name="configureOptions">An action to configure the WPF application lifetime options.</param>
    /// <returns>
    /// The configured <see cref="global::Microsoft.Extensions.Hosting.IHostApplicationBuilder"/>.
    /// </returns>
    public static global::Microsoft.Extensions.Hosting.IHostApplicationBuilder UseWpfApplicationLifetime(this global::Microsoft.Extensions.Hosting.IHostApplicationBuilder builder, global::System.Action<global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetimeOptions> configureOptions)
    {
        builder.Services.AddSingleton<global::Microsoft.Extensions.Hosting.IHostLifetime, global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetime>();
        builder.Services.Configure(configureOptions);
        return builder;
    }

    /// <summary>
    /// Runs the WPF application asynchronously.
    /// </summary>
    /// <typeparam name="T">The type of the main window.</typeparam>
    /// <param name="builder">The host application builder.</param>
    /// <param name="showConsoleWithDebugger">
    /// Indicates whether to show the console when a debugger is attached.
    /// </param>
    /// <param name="showConsoleWithDebugEnvironment">
    /// Indicates whether to show the console in a debug environment.
    /// </param>
    /// <param name="cancellationToken">A cancellation token for the operation.</param>
    /// <returns>
    /// A <see cref="global::System.Threading.Tasks.Task"/> representing the asynchronous operation.
    /// </returns>
    public static global::System.Threading.Tasks.Task RunWpfApplicationAsync<T>(this global::Microsoft.Extensions.Hosting.HostApplicationBuilder builder, bool showConsoleWithDebugger = false, bool showConsoleWithDebugEnvironment = false, global::System.Threading.CancellationToken cancellationToken = default)
        where T : global::System.Windows.Window
    {
        builder.UseWpfApplicationLifetime();
        return RunWpfApplicationAsyncInternal<T>(builder, showConsoleWithDebugger, showConsoleWithDebugEnvironment, cancellationToken);
    }

    /// <summary>
    /// Runs the WPF application asynchronously with custom lifetime options.
    /// </summary>
    /// <typeparam name="T">The type of the main window.</typeparam>
    /// <param name="builder">The host application builder.</param>
    /// <param name="configureOptions">An action to configure the WPF application lifetime options.</param>
    /// <param name="showConsoleWithDebugger">
    /// Indicates whether to show the console when a debugger is attached.
    /// </param>
    /// <param name="showConsoleWithDebugEnvironment">
    /// Indicates whether to show the console in a debug environment.
    /// </param>
    /// <param name="cancellationToken">A cancellation token for the operation.</param>
    /// <returns>
    /// A <see cref="global::System.Threading.Tasks.Task"/> representing the asynchronous operation.
    /// </returns>
    public static global::System.Threading.Tasks.Task RunWpfApplicationAsync<T>(this global::Microsoft.Extensions.Hosting.HostApplicationBuilder builder, global::System.Action<global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetimeOptions> configureOptions, bool showConsoleWithDebugger = false, bool showConsoleWithDebugEnvironment = false, global::System.Threading.CancellationToken cancellationToken = default)
        where T : global::System.Windows.Window
    {
        builder.UseWpfApplicationLifetime(configureOptions);
        return RunWpfApplicationAsyncInternal<T>(builder, showConsoleWithDebugger, showConsoleWithDebugEnvironment, cancellationToken);
    }

    private static async global::System.Threading.Tasks.Task RunWpfApplicationAsyncInternal<T>(global::Microsoft.Extensions.Hosting.HostApplicationBuilder builder, bool showConsoleWithDebugger, bool showConsoleWithDebugEnvironment, global::System.Threading.CancellationToken cancellationToken)
        where T : global::System.Windows.Window
    {
        ToggleDebugConsole(showConsoleWithDebugger, showConsoleWithDebugEnvironment);
        builder.Services.AddSingleton<T>();
        using var host = builder.Build();
        ((App)global::System.Windows.Application.Current).Host = host;
        var window = host.Services.GetRequiredService<T>();
        var applicationLifetime = host.Services.GetRequiredService<global::Microsoft.Extensions.Hosting.IHostApplicationLifetime>();
        applicationLifetime.ApplicationStopped.Register(() => host?.Dispose());
        await host.StartAsync(cancellationToken).ConfigureAwait(false);
        await window.ShowDialogAsync().ConfigureAwait(false);
        ToggleDebugConsole(showConsoleWithDebugger, showConsoleWithDebugEnvironment);
        await host.StopAsync(cancellationToken).ConfigureAwait(false);
    }
#else
#if NET5_0_OR_GREATER
    [global::System.Runtime.Versioning.SupportedOSPlatform("windows")]
#endif
    /// <summary>
    /// Configures the WPF application lifetime for the host.
    /// </summary>
    /// <param name="builder">The host builder.</param>
    /// <returns>
    /// The configured <see cref="global::Microsoft.Extensions.Hosting.IHostBuilder"/>.
    /// </returns>
    public static global::Microsoft.Extensions.Hosting.IHostBuilder UseWpfApplicationLifetime(this global::Microsoft.Extensions.Hosting.IHostBuilder builder)
    {
        return builder.ConfigureServices(services => services.AddSingleton<global::Microsoft.Extensions.Hosting.IHostLifetime, global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetime>());
    }

#if NET5_0_OR_GREATER
    [global::System.Runtime.Versioning.SupportedOSPlatform("windows")]
#endif
    /// <summary>
    /// Configures the WPF application lifetime for the host with custom options.
    /// </summary>
    /// <param name="builder">The host builder.</param>
    /// <param name="configureOptions">An action to configure the WPF application lifetime options.</param>
    /// <returns>
    /// The configured <see cref="global::Microsoft.Extensions.Hosting.IHostBuilder"/>.
    /// </returns>
    public static global::Microsoft.Extensions.Hosting.IHostBuilder UseWpfApplicationLifetime(this global::Microsoft.Extensions.Hosting.IHostBuilder builder, global::System.Action<global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetimeOptions> configureOptions)
    {
        return builder.ConfigureServices(services =>
        {
            services.TryAddSingleton<global::Microsoft.Extensions.Hosting.IHostLifetime, global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetime>();
            services.Configure(configureOptions);
        });
    }

    /// <summary>
    /// Runs the WPF application asynchronously.
    /// </summary>
    /// <typeparam name="T">The type of the main window.</typeparam>
    /// <param name="builder">The host builder.</param>
    /// <param name="showConsoleWithDebugger">
    /// Indicates whether to show the console when a debugger is attached.
    /// </param>
    /// <param name="showConsoleWithDebugEnvironment">
    /// Indicates whether to show the console in a debug environment.
    /// </param>
    /// <param name="cancellationToken">A cancellation token for the operation.</param>
    /// <returns>
    /// A <see cref="global::System.Threading.Tasks.Task"/> representing the asynchronous operation.
    /// </returns>
    public static global::System.Threading.Tasks.Task RunWpfApplicationAsync<T>(this global::Microsoft.Extensions.Hosting.IHostBuilder builder, bool showConsoleWithDebugger = false, bool showConsoleWithDebugEnvironment = false, global::System.Threading.CancellationToken cancellationToken = default)
        where T : global::System.Windows.Window
    {
        builder.UseWpfApplicationLifetime();
        return RunWpfApplicationAsyncInternal<T>(builder, showConsoleWithDebugger, showConsoleWithDebugEnvironment, cancellationToken);
    }

    /// <summary>
    /// Runs the WPF application asynchronously with custom lifetime options.
    /// </summary>
    /// <typeparam name="T">The type of the main window.</typeparam>
    /// <param name="builder">The host builder.</param>
    /// <param name="configureOptions">An action to configure the WPF application lifetime options.</param>
    /// <param name="showConsoleWithDebugger">
    /// Indicates whether to show the console when a debugger is attached.
    /// </param>
    /// <param name="showConsoleWithDebugEnvironment">
    /// Indicates whether to show the console in a debug environment.
    /// </param>
    /// <param name="cancellationToken">A cancellation token for the operation.</param>
    /// <returns>
    /// A <see cref="global::System.Threading.Tasks.Task"/> representing the asynchronous operation.
    /// </returns>
    public static global::System.Threading.Tasks.Task RunWpfApplicationAsync<T>(this global::Microsoft.Extensions.Hosting.IHostBuilder builder, global::System.Action<global::ZirconNet.WPF.Hosting.Lifetime.WpfApplicationLifetimeOptions> configureOptions, bool showConsoleWithDebugger = false, bool showConsoleWithDebugEnvironment = false, global::System.Threading.CancellationToken cancellationToken = default)
        where T : global::System.Windows.Window
    {
        builder.UseWpfApplicationLifetime(configureOptions);
        return RunWpfApplicationAsyncInternal<T>(builder, showConsoleWithDebugger, showConsoleWithDebugEnvironment, cancellationToken);
    }

    private static async global::System.Threading.Tasks.Task RunWpfApplicationAsyncInternal<T>(global::Microsoft.Extensions.Hosting.IHostBuilder builder, bool showConsoleWithDebugger, bool showConsoleWithDebugEnvironment, global::System.Threading.CancellationToken cancellationToken)
        where T : global::System.Windows.Window
    {
        ToggleDebugConsole(showConsoleWithDebugger, showConsoleWithDebugEnvironment);
        builder.ConfigureServices(services => services.AddSingleton<T>());
        using var host = builder.Build();
        ((App)global::System.Windows.Application.Current).Host = host;
        var window = host.Services.GetRequiredService<T>();
        var applicationLifetime = host.Services.GetRequiredService<global::Microsoft.Extensions.Hosting.IHostApplicationLifetime>();
        applicationLifetime.ApplicationStopped.Register(() => host?.Dispose());
        await host.StartAsync(cancellationToken).ConfigureAwait(false);
        await window.ShowDialogAsync().ConfigureAwait(false);
        ToggleDebugConsole(showConsoleWithDebugger, showConsoleWithDebugEnvironment);
        await host.StopAsync(cancellationToken).ConfigureAwait(false);
    }
#endif

    /// <summary>
    /// Toggles the debug console based on the current debugging and environment settings.
    /// </summary>
    /// <param name="showConsoleWithDebugger">
    /// If set to <c>true</c>, the console is shown when a debugger is attached.
    /// </param>
    /// <param name="showConsoleWithDebugEnvironment">
    /// If set to <c>true</c>, the console is shown in a debug environment.
    /// </param>
    private static void ToggleDebugConsole(bool showConsoleWithDebugger, bool showConsoleWithDebugEnvironment)
    {
        if ((global::ZirconNet.Core.Environments.EnvironmentManager.Current.IsDebug && showConsoleWithDebugEnvironment)
            || (global::System.Diagnostics.Debugger.IsAttached && showConsoleWithDebugger))
        {
            global::ZirconNet.WPF.Debugging.ConsoleManager.Toggle();
        }
    }
}
