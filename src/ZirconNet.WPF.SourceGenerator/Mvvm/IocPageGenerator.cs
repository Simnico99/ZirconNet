using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ZirconNet.WPF.SourceGenerator.Mvvm;

/// <summary>
/// Generates partial classes for pages bound using <see cref="PageDataContextAttribute"/>.
/// </summary>
[Generator]
public sealed class IocPageGenerator : IIncrementalGenerator
{
    /// <inheritdoc/>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var candidates = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is ClassDeclarationSyntax,
                transform: (ctx, _) =>
                {
                    var classSyntax = (ClassDeclarationSyntax)ctx.Node;

                    if (ctx.SemanticModel.GetDeclaredSymbol(classSyntax) is not INamedTypeSymbol symbol)
                    {
                        return null;
                    }

                    var attr = symbol.GetAttributes()
                        .FirstOrDefault(ad => ad.AttributeClass?.Name == "PageDataContextAttribute");

                    return attr is not null ? new PageBindingInfo(symbol, attr) : null;
                })
            .Where(info => info is not null)!;

        context.RegisterSourceOutput(
            candidates.Collect(),
            (spc, bindings) =>
            {
                var pages = bindings
                    .SelectMany(binding => binding!.Pages.Select(p => (Page: p!, binding.ViewModel)))
                    .GroupBy(x => x.Page, SymbolEqualityComparer.Default);

                foreach (var group in pages)
                {
                    var source = GeneratePagePartial((INamedTypeSymbol?)group.Key, group.Select(x => x.ViewModel));
                    spc.AddSource($"ZirconNet.WPF.SourceGenerator.{group.Key?.Name}_IocPage.g.cs", SourceText.From(source, Encoding.UTF8));
                }
            });
    }


    private static string GeneratePagePartial(INamedTypeSymbol? pageType, IEnumerable<INamedTypeSymbol> viewModels)
    {
        if (pageType is null)
        {
            return string.Empty;
        }

        var namespaces = new HashSet<string?>();
        var propertyDeclarations = new StringBuilder();
        foreach (var viewModel in viewModels)
        {
            var ns = viewModel.ContainingNamespace.ToDisplayString();
            namespaces.Add(ns);

            var vmType = viewModel.Name;

            propertyDeclarations.AppendLine($"    public {vmType} {vmType} => _appHost.Services.GetRequiredService<{vmType}>();");
        }

        var usings = new StringBuilder();
        foreach (var ns in namespaces)
        {
            if (ns != pageType.ContainingNamespace.ToDisplayString())
            {
                usings.AppendLine($"using {ns};");
            }
        }

        return $$"""
// <auto-generated />
#nullable enable
using System.Windows;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
{{usings}}
namespace {{pageType.ContainingNamespace.ToDisplayString()}};

public partial class {{pageType.Name}}
{
    private static IHost _appHost = ((App)Application.Current).Host;

{{propertyDeclarations}}
}
""";
    }


    private sealed class PageBindingInfo
    {
        public PageBindingInfo(INamedTypeSymbol viewModel, AttributeData attr)
        {
            ViewModel = viewModel;

            Pages = attr.ConstructorArguments.FirstOrDefault().Values
                .Select(tc => tc.Value as INamedTypeSymbol)
                .Where(t => t is not null)
                .ToImmutableArray()!;
        }

        public INamedTypeSymbol ViewModel { get; }
        public ImmutableArray<INamedTypeSymbol> Pages { get; }
    }

}
